# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tIuQjhz1ohemzST0EvaSG_wOI7L2u8Cx
"""

from collections import Counter

# Define the dataset
data = [
    ['sunny', 85.0, 85.0, 'FALSE', 'no'],
    ['sunny', 80.0, 90.0, 'TRUE', 'no'],
    ['overcast', 83.0, 86.0, 'FALSE', 'yes'],
    ['rainy', 70.0, 96.0, 'FALSE', 'yes'],
    ['rainy', 68.0, 80.0, 'FALSE', 'yes'],
    ['rainy', 65.0, 70.0, 'TRUE', 'no'],
    ['overcast', 64.0, 65.0, 'TRUE', 'yes'],
    ['sunny', 72.0, 95.0, 'FALSE', 'no'],
    ['sunny', 69.0, 70.0, 'FALSE', 'yes'],
    ['rainy', 75.0, 80.0, 'FALSE', 'yes'],
    ['sunny', 75.0, 70.0, 'TRUE', 'yes'],
    ['overcast', 72.0, 90.0, 'TRUE', 'yes'],
    ['overcast', 81.0, 75.0, 'FALSE', 'yes'],
    ['rainy', 71.0, 91.0, 'TRUE', 'no']
]

# Define the decision tree function
def decision_tree(outlook, windy, humidity):
    if outlook == 'overcast':
        return 'yes'
    elif outlook == 'sunny':
        if windy == 'TRUE':
            if humidity >= 95.0:
                return 'yes'
            else:
                return 'no'
        else:
            return 'no'
    # For rainy outlook, we can return the majority class or handle it differently
    play_counts = Counter(row[-1] for row in data if row[0] == 'rainy')
    return max(play_counts, key=play_counts.get)

# Test the decision tree
for row in data:
    outlook, temperature, humidity, windy, play = row
    prediction = decision_tree(outlook, windy, humidity)
    print(f"Actual: {play}, Predicted: {prediction}")







































